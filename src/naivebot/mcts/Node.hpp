
#pragma once

#include "../Action.hpp"
#include "../State.hpp"
#include "../../util/Common.hpp"

namespace naivebot {
namespace mcts {

// A node of a search tree.
class Node {
public:
  using Edge = pair<uptr<Action>, uptr<Node>>;

  Node(uptr<State> state, unsigned playerIndex);
  virtual ~Node() = default;

  bool IsLeaf(void) const;
  unsigned PlayerIndex(void) const;
  State *GetState(void) const;

  vector<pair<Action *, double>> GetActionUtilities(void) const;

  // TODO: should add a policy object as input that will choose which action to expand.
  // Returns a new node that is generated by an action from this node.
  Node *Expand(void); // Can only be done on a 'leaf'

  // TODO: should add a policy object as input that will choose which edge to select.
  // For now it's simply e-greedy.
  Node *Select(double pRandom); // Should only be done on non-leaves.

  void AddUtility(double utility);

  // From this node, what is the probability the given player will win.
  double ExpectedUtility(unsigned playerIndex) const;

private:
  uptr<State> state;
  vector<Edge> children;

  // This should be an enum maybe. This signifies which players turn it is for this node,
  // since this is an adversarial game, it is not always "my" turn, where "me" is defined
  // as the player at the root of the tree.
  unsigned playerIndex; // index 0 is "me", index 1 is opponent.
  bool isLeaf;

  unsigned totalTrials;
  double sumUtility;

  vector<uptr<Action>> nonExpandedActions(void);
};
}
}
